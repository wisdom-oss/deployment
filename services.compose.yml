---
x-database-credentials: &dbEnvironment
  PGHOST: ${DATABASE_HOST:-db}
  PGUSER: ${DATABASE_USER:-postgres}
  PGPASSWORD: ${DATABASE_PASSWORD:?postgres password required}
  PGPORT: ${DATABASE_PORT:-5432}
  PGDATABASE: ${DATABASE_NAME:-wisdom}
  PGSSLMODE: ${DATABASE_SSL_MODE:-disable}

x-database-dependency: &dbDependency
  db:
    condition: ${DATABASE_REQUIRED_STATE:-service_healthy}
    restart: true
    required: true

x-extra-hosts: &extraHosts
  extra_hosts:
      - "host.docker.internal:host-gateway"

services:

  authentication:
    image: ghcr.io/wisdom-oss/service-user-management:${BACKEND_VERSION:-latest}
    restart: unless-stopped
    depends_on: *dbDependency
    environment: 
      <<: *dbEnvironment
      OIDC_CLIENT_ID: ${OIDC_CLIENT_ID:?oidc client id requried}
      OIDC_CLIENT_SECRET: ${OIDC_CLIENT_SECRET:?oidc client secret requried}
      OIDC_ISSUER: ${OIDC_ISSUER:?oidc issuer not set}
      REDIS_URI: redis://redis:6379/1
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.authentication.middlewares=authenticationPrefixStrip"
      - "traefik.http.routers.authentication.rule=PathPrefix(`/api/auth`)"
      - "traefik.http.middlewares.authenticationPrefixStrip.stripprefix.prefixes=/api/auth"
    <<: *extraHosts
    
  geodata:
    image: ghcr.io/wisdom-oss/service-geo-data-rest:${BACKEND_VERSION:-latest}
    restart: unless-stopped
    scale: ${SERVICE_REPLICAS:-1}
    depends_on: *dbDependency
    environment: *dbEnvironment
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.geodata.middlewares=geodataPrefixStrip"
      - "traefik.http.routers.geodata.rule=PathPrefix(`/api/geodata`)"
      - "traefik.http.middlewares.geodataPrefixStrip.stripprefix.prefixes=/api/geodata"  

  consumers:
    image: ghcr.io/wisdom-oss/service-consumers:${BACKEND_VERSION:-latest}
    restart: unless-stopped
    scale: ${SERVICE_REPLICAS:-1}
    depends_on: *dbDependency
    environment: *dbEnvironment
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.consumers.middlewares=consumersPrefixStrip"
      - "traefik.http.routers.consumers.rule=PathPrefix(`/api/consumers`)"
      - "traefik.http.middlewares.consumersPrefixStrip.stripprefix.prefixes=/api/consumers"
    <<: *extraHosts

  water-rights:
    image: ghcr.io/wisdom-oss/service-water-rights:${BACKEND_VERSION:-latest}
    restart: unless-stopped
    scale: ${SERVICE_REPLICAS:-1}
    depends_on: *dbDependency
    environment: *dbEnvironment
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.waterRights.middlewares=waterRightsPrefixStrip"
      - "traefik.http.routers.waterRights.rule=PathPrefix(`/api/water-rights`)"
      - "traefik.http.middlewares.waterRightsPrefixStrip.stripprefix.prefixes=/api/water-rights"
    <<: *extraHosts
  
  usage-forecasts:
    image: ghcr.io/wisdom-oss/service-usage-forecasts:${BACKEND_VERSION:-latest}
    restart: unless-stopped
    scale: ${SERVICE_REPLICAS:-1}
    depends_on: *dbDependency
    environment: *dbEnvironment
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.usageForecasts.middlewares=usageForecastsPrefixStrip"
      - "traefik.http.routers.usageForecasts.rule=PathPrefix(`/api/water-usage-forecasts`)"
      - "traefik.http.middlewares.usageForecastsPrefixStrip.stripprefix.prefixes=/api/water-usage-forecasts"
    <<: *extraHosts

  usage-history:
    image: ghcr.io/wisdom-oss/service-water-usage-history:${BACKEND_VERSION:-latest}
    restart: unless-stopped
    scale: ${SERVICE_REPLICAS:-1}
    depends_on: *dbDependency
    environment: *dbEnvironment
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.usageHistory.middlewares=usageHistoryPrefixStrip"
      - "traefik.http.routers.usageHistory.rule=PathPrefix(`/api/water-usage-history`)"
      - "traefik.http.middlewares.usageHistoryPrefixStrip.stripprefix.prefixes=/api/water-usage-history"
    <<: *extraHosts

  groundwater-levels:
    image: ghcr.io/wisdom-oss/service-groundwater-levels:${BACKEND_VERSION:-latest}
    restart: unless-stopped
    scale: ${SERVICE_REPLICAS:-1}
    depends_on: *dbDependency
    environment: *dbEnvironment
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.groundwaterLevels.middlewares=groundwaterLevelsPrefixStrip"
      - "traefik.http.routers.groundwaterLevels.rule=PathPrefix(`/api/groundwater-levels`)"
      - "traefik.http.middlewares.groundwaterLevelsPrefixStrip.stripprefix.prefixes=/api/groundwater-levels"
    <<: *extraHosts

  dwd-proxy:
    image: ghcr.io/wisdom-oss/service-dwd-proxy:${BACKEND_VERSION:-latest}
    restart: unless-stopped
    scale: ${SERVICE_REPLICAS:-1}
    environment:
      REDIS_URI: redis://redis:6379
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dwdProxy.middlewares=dwdProxyPrefixStrip"
      - "traefik.http.routers.dwdProxy.rule=PathPrefix(`/api/dwd`)"
      - "traefik.http.middlewares.dwdProxyPrefixStrip.stripprefix.prefixes=/api/dwd"

  smartmeters:
    image: ghcr.io/wisdom-oss/service-smartmeter-rest:${BACKEND_VERSION:-latest}
    restart: unless-stopped
    scale: ${SERVICE_REPLICAS:-1}
    depends_on: *dbDependency
    environment: *dbEnvironment
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.smartmeter.middlewares=smartmeterPrefixStrip"
      - "traefik.http.routers.smartmeter.rule=PathPrefix(`/api/smartmeter`)"
      - "traefik.http.middlewares.smartmeterPrefixStrip.stripprefix.prefixes=/api/smartmeter"
    <<: *extraHosts
    
    
...